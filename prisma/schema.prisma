generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String       @id @default(cuid())
  dateJoined     DateTime     @default(now())
  name           String?
  bio            String?
  email          String       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  gameJamsHosted GameJam[]
  teamToUser     TeamToUser[]
  jobsApplied    Job[]
}

// An `Organization` can host multiple game jam and game jams can have multiple hosts
model Organization {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String
  gameJams    GameJam[]
  job         Job[]
}

model GameJam {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  name        String
  description String
  startDate   DateTime
  endDate     DateTime // validation to ensure endDate is after startDate
  hosts       Organization[]
  hostUsers   User[]
  teams       Team[]
}

// A Team is composed of users who participate in a GameJam
// One Team per GameJam
model Team {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  placing    Int?
  gameJam    GameJam      @relation(fields: [gameJamId], references: [id], onDelete: Cascade)
  gameJamId  String
  teamToUser TeamToUser[]

  @@unique([placing, gameJamId])
  @@unique([name, gameJamId])
  @@unique([id, gameJamId])
}

// Added constraint where a user cannot be in multiple teams entered in the
//  in the same game jam.
model TeamToUser {
  team      Team   @relation(fields: [teamId, gameJamId], references: [id, gameJamId], onDelete: Cascade)
  teamId    String
  gameJamId String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([gameJamId, userId])
  @@index([teamId, userId])
}

// future
model Job {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  expiredAt      DateTime // set dates by intervals?
  title          String
  description    String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  applicants     User[]

  @@unique([id, organizationId])
}
