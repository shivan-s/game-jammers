generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm()]
}

// model Example {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  dateJoined    DateTime  @default(now())
  email         String    @unique
  emailVerified DateTime?

  name  String?
  image String?

  profile  Profile?
  accounts Account[]
  sessions Session[]

  gameJamsHosted GameJam[]
  teamToUser     TeamToUser[]

  connectionRequestSent     UserConnect[] @relation("sender")
  connectionRequestReceived UserConnect[] @relation("receiver")

  connectionBlockedBy UserBlocked[] @relation("blocked")
  connectionBlocking  UserBlocked[] @relation("blocker")

  skillLevel SkillLevel @default(BEGINNER)
  tags       Tag[]
  role       Role       @default(MEMBER)
}

model Profile {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  username String  @unique
  bio      String?
}

enum Role {
  ADMIN
  STAFF
  MEMBER
  BANNED
}

enum SkillLevel {
  NEW
  BEGINNER
  INTERMEDIATE
  VETERAN
  PROFESSIONAL
}

model UserConnect {
  createdAt  DateTime @default(now())
  sender     User     @relation("sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  receiverId String
  accepted   Boolean  @default(false)
  ignored    Boolean  @default(false)

  @@id([senderId, receiverId])
}

model UserBlocked {
  createdAt DateTime @default(now())
  blocker   User     @relation("blocker", fields: [blockerId], references: [id])
  blockerId String
  blocked   User     @relation("blocked", fields: [blockedId], references: [id])
  blockedId String
  isBlocked Boolean  @default(false)

  @@id([blockerId, blockedId])
}

model TagCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String   @unique
  tags     Tag[]
  tagColor TagColor
}

model Tag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  tagCategory   TagCategory @relation(fields: [tagCategoryId], references: [id])
  tagCategoryId String
  users         User[]

  @@unique([tagCategoryId, name])
}

enum TagColor {
  BLUE
  GREEN
  YELLOW
}

// An `Organization` can host multiple game jam and game jams can have multiple hosts
model Organization {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String
  gameJams    GameJam[]
}

model GameJam {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate   DateTime
  endDate     DateTime // validation to ensure endDate is after startDate
  name        String   @unique
  description String
  image       String?

  hosts     Organization[]
  hostUsers User[]
  teams     Team[]

  rules Rule[]
}

model Rule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gameJame GameJam[]

  name        String
  description String?
  isAllowed   Boolean
}

// A Team is composed of users who participate in a GameJam
// One Team per GameJam
model Team {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  placing    Int?
  gameJam    GameJam      @relation(fields: [gameJamId], references: [id], onDelete: Cascade)
  gameJamId  String
  teamToUser TeamToUser[]

  @@unique([placing, gameJamId])
  @@unique([name, gameJamId])
  @@unique([id, gameJamId])
}

// Added constraint where a user cannot be in multiple teams entered in the
//  in the same game jam.
model TeamToUser {
  team      Team   @relation(fields: [teamId, gameJamId], references: [id, gameJamId], onDelete: Cascade)
  teamId    String
  gameJamId String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([gameJamId, userId])
  @@index([teamId, userId])
}

// future
// model Job {
//   id             String       @id @default(cuid())
//   createdAt      DateTime     @default(now())
//   updatedAt      DateTime     @updatedAt
//   expiredAt      DateTime // set dates by intervals?
//   title          String
//   description    String
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   organizationId String
//   applicants     User[]
//
//   @@unique([id, organizationId])
// }
